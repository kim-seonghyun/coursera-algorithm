import edu.princeton.cs.algs4.StdRandom;
import edu.princeton.cs.algs4.WeightedQuickUnionUF;

public class Percolation {
    //프라이빗
    private WeightedQuickUnionUF unionFind;
    //그래프
    private boolean[][] field;
    //카운터
    private int count = 0;

    //4방향 확인
    private final int[] direct = { -1, +1, +10, -10 };
    private final int[] x = { -1, +1, 0, 0 };
    private final int[] y = { 0, 0, +1, -1 };

    //생성자
    public Percolation(int n) {
        this.unionFind = new WeightedQuickUnionUF((n + 1) * (n + 1));
        this.field = new boolean[n + 1][n + 1];
    }

    //공극 생성
    public void open(int row, int col) {
        if (!isOpen(row, col)) {
            if (row == 1) {
                this.unionFind.union(0, row + col);
            }
            if (col == this.field.length - 1) {
                this.unionFind.union(this.field.length, row * 10 + col);
            }
            this.field[row][col] = true;
            this.count++;
            for (int i = 0; i < 4; i++) {
                if (this.field[row + this.x[i]][col + this.y[i]]) {
                    int node = row * 10 + col;
                    this.unionFind.union(node, node + this.direct[i]);
                }
            }
        }
    }

    //지정한 좌표가 공극인지
    public boolean isOpen(int row, int col) {
        return this.field[row][col];
    }

    //weighted unionfind의 connected ㄲ
    public boolean isFull(int row, int col) {
        return unionFind.connected(0, row * 10 + col);
    }

    //공극 개수 리턴
    public int numberOfOpenSites() {
        return this.count;
    }

    public boolean percolates() {
        return unionFind.connected(0, this.field.length);
    }

    //메인문
    public static void main(String[] args) {
        while (this.percolates()) {
            int x = StdRandom.uniform(1, 10);
            int y = StdRandom.uniform(1, 10);
            ball.open(x, y);
        }
        System.out.println(ball.numberOfOpenSites());
    }
}
